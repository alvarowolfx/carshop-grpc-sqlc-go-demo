// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package carshop

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BackOfficeServiceClient is the client API for BackOfficeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackOfficeServiceClient interface {
	RegisterOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RegisterCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type backOfficeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackOfficeServiceClient(cc grpc.ClientConnInterface) BackOfficeServiceClient {
	return &backOfficeServiceClient{cc}
}

func (c *backOfficeServiceClient) RegisterOwner(ctx context.Context, in *Owner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.aviebrantz.carshop.BackOfficeService/RegisterOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backOfficeServiceClient) RegisterCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.aviebrantz.carshop.BackOfficeService/RegisterCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackOfficeServiceServer is the server API for BackOfficeService service.
// All implementations should embed UnimplementedBackOfficeServiceServer
// for forward compatibility
type BackOfficeServiceServer interface {
	RegisterOwner(context.Context, *Owner) (*emptypb.Empty, error)
	RegisterCar(context.Context, *Car) (*emptypb.Empty, error)
}

// UnimplementedBackOfficeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBackOfficeServiceServer struct {
}

func (UnimplementedBackOfficeServiceServer) RegisterOwner(context.Context, *Owner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOwner not implemented")
}
func (UnimplementedBackOfficeServiceServer) RegisterCar(context.Context, *Car) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCar not implemented")
}

// UnsafeBackOfficeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackOfficeServiceServer will
// result in compilation errors.
type UnsafeBackOfficeServiceServer interface {
	mustEmbedUnimplementedBackOfficeServiceServer()
}

func RegisterBackOfficeServiceServer(s *grpc.Server, srv BackOfficeServiceServer) {
	s.RegisterService(&_BackOfficeService_serviceDesc, srv)
}

func _BackOfficeService_RegisterOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Owner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackOfficeServiceServer).RegisterOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.aviebrantz.carshop.BackOfficeService/RegisterOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackOfficeServiceServer).RegisterOwner(ctx, req.(*Owner))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackOfficeService_RegisterCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackOfficeServiceServer).RegisterCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.aviebrantz.carshop.BackOfficeService/RegisterCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackOfficeServiceServer).RegisterCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

var _BackOfficeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.aviebrantz.carshop.BackOfficeService",
	HandlerType: (*BackOfficeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOwner",
			Handler:    _BackOfficeService_RegisterOwner_Handler,
		},
		{
			MethodName: "RegisterCar",
			Handler:    _BackOfficeService_RegisterCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carshop.proto",
}

// WorkOrderServiceClient is the client API for WorkOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkOrderServiceClient interface {
	RegisterWorkOrder(ctx context.Context, in *WorkOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRunningWorkOrders(ctx context.Context, in *RunningWorkOrdersQuery, opts ...grpc.CallOption) (*RunningWorkOrdersResponse, error)
	StartWorkOrderService(ctx context.Context, in *StartWorkOrderServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinishWorkOrderService(ctx context.Context, in *FinishWorkOrderServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EndWorkOrder(ctx context.Context, in *EndWorkOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type workOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkOrderServiceClient(cc grpc.ClientConnInterface) WorkOrderServiceClient {
	return &workOrderServiceClient{cc}
}

func (c *workOrderServiceClient) RegisterWorkOrder(ctx context.Context, in *WorkOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.aviebrantz.carshop.WorkOrderService/RegisterWorkOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) GetRunningWorkOrders(ctx context.Context, in *RunningWorkOrdersQuery, opts ...grpc.CallOption) (*RunningWorkOrdersResponse, error) {
	out := new(RunningWorkOrdersResponse)
	err := c.cc.Invoke(ctx, "/com.aviebrantz.carshop.WorkOrderService/GetRunningWorkOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) StartWorkOrderService(ctx context.Context, in *StartWorkOrderServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.aviebrantz.carshop.WorkOrderService/StartWorkOrderService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) FinishWorkOrderService(ctx context.Context, in *FinishWorkOrderServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.aviebrantz.carshop.WorkOrderService/FinishWorkOrderService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) EndWorkOrder(ctx context.Context, in *EndWorkOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.aviebrantz.carshop.WorkOrderService/EndWorkOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkOrderServiceServer is the server API for WorkOrderService service.
// All implementations should embed UnimplementedWorkOrderServiceServer
// for forward compatibility
type WorkOrderServiceServer interface {
	RegisterWorkOrder(context.Context, *WorkOrderRequest) (*emptypb.Empty, error)
	GetRunningWorkOrders(context.Context, *RunningWorkOrdersQuery) (*RunningWorkOrdersResponse, error)
	StartWorkOrderService(context.Context, *StartWorkOrderServiceRequest) (*emptypb.Empty, error)
	FinishWorkOrderService(context.Context, *FinishWorkOrderServiceRequest) (*emptypb.Empty, error)
	EndWorkOrder(context.Context, *EndWorkOrderRequest) (*emptypb.Empty, error)
}

// UnimplementedWorkOrderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkOrderServiceServer struct {
}

func (UnimplementedWorkOrderServiceServer) RegisterWorkOrder(context.Context, *WorkOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorkOrder not implemented")
}
func (UnimplementedWorkOrderServiceServer) GetRunningWorkOrders(context.Context, *RunningWorkOrdersQuery) (*RunningWorkOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningWorkOrders not implemented")
}
func (UnimplementedWorkOrderServiceServer) StartWorkOrderService(context.Context, *StartWorkOrderServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkOrderService not implemented")
}
func (UnimplementedWorkOrderServiceServer) FinishWorkOrderService(context.Context, *FinishWorkOrderServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishWorkOrderService not implemented")
}
func (UnimplementedWorkOrderServiceServer) EndWorkOrder(context.Context, *EndWorkOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndWorkOrder not implemented")
}

// UnsafeWorkOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkOrderServiceServer will
// result in compilation errors.
type UnsafeWorkOrderServiceServer interface {
	mustEmbedUnimplementedWorkOrderServiceServer()
}

func RegisterWorkOrderServiceServer(s *grpc.Server, srv WorkOrderServiceServer) {
	s.RegisterService(&_WorkOrderService_serviceDesc, srv)
}

func _WorkOrderService_RegisterWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).RegisterWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.aviebrantz.carshop.WorkOrderService/RegisterWorkOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).RegisterWorkOrder(ctx, req.(*WorkOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_GetRunningWorkOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunningWorkOrdersQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).GetRunningWorkOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.aviebrantz.carshop.WorkOrderService/GetRunningWorkOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).GetRunningWorkOrders(ctx, req.(*RunningWorkOrdersQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_StartWorkOrderService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkOrderServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).StartWorkOrderService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.aviebrantz.carshop.WorkOrderService/StartWorkOrderService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).StartWorkOrderService(ctx, req.(*StartWorkOrderServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_FinishWorkOrderService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishWorkOrderServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).FinishWorkOrderService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.aviebrantz.carshop.WorkOrderService/FinishWorkOrderService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).FinishWorkOrderService(ctx, req.(*FinishWorkOrderServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_EndWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndWorkOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).EndWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.aviebrantz.carshop.WorkOrderService/EndWorkOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).EndWorkOrder(ctx, req.(*EndWorkOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkOrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.aviebrantz.carshop.WorkOrderService",
	HandlerType: (*WorkOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWorkOrder",
			Handler:    _WorkOrderService_RegisterWorkOrder_Handler,
		},
		{
			MethodName: "GetRunningWorkOrders",
			Handler:    _WorkOrderService_GetRunningWorkOrders_Handler,
		},
		{
			MethodName: "StartWorkOrderService",
			Handler:    _WorkOrderService_StartWorkOrderService_Handler,
		},
		{
			MethodName: "FinishWorkOrderService",
			Handler:    _WorkOrderService_FinishWorkOrderService_Handler,
		},
		{
			MethodName: "EndWorkOrder",
			Handler:    _WorkOrderService_EndWorkOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carshop.proto",
}
