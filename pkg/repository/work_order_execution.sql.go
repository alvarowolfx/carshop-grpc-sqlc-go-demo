// Code generated by sqlc. DO NOT EDIT.
// source: work_order_execution.sql

package repository

import (
	"context"
)

const endWorkOrderServiceExecution = `-- name: EndWorkOrderServiceExecution :exec
UPDATE work_order_service_executions
SET finished_at = NOW()
WHERE work_order_id = $1
  and finished_at is null
`

func (q *Queries) EndWorkOrderServiceExecution(ctx context.Context, workOrderID int64) error {
	_, err := q.exec(ctx, q.endWorkOrderServiceExecutionStmt, endWorkOrderServiceExecution, workOrderID)
	return err
}

const getRunningServices = `-- name: GetRunningServices :many
SELECT id, type, work_order_id, created_at, finished_at
FROM work_order_service_executions
WHERE work_order_id = $1
  and finished_at is null
`

func (q *Queries) GetRunningServices(ctx context.Context, workOrderID int64) ([]WorkOrderServiceExecution, error) {
	rows, err := q.query(ctx, q.getRunningServicesStmt, getRunningServices, workOrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkOrderServiceExecution
	for rows.Next() {
		var i WorkOrderServiceExecution
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.WorkOrderID,
			&i.CreatedAt,
			&i.FinishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerWorkOrderServiceExecution = `-- name: RegisterWorkOrderServiceExecution :one
INSERT INTO work_order_service_executions (type, work_order_id)
VALUES ($1, $2)
RETURNING id, type, work_order_id, created_at, finished_at
`

type RegisterWorkOrderServiceExecutionParams struct {
	Type        ServiceType `json:"type"`
	WorkOrderID int64       `json:"work_order_id"`
}

func (q *Queries) RegisterWorkOrderServiceExecution(ctx context.Context, arg RegisterWorkOrderServiceExecutionParams) (WorkOrderServiceExecution, error) {
	row := q.queryRow(ctx, q.registerWorkOrderServiceExecutionStmt, registerWorkOrderServiceExecution, arg.Type, arg.WorkOrderID)
	var i WorkOrderServiceExecution
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.WorkOrderID,
		&i.CreatedAt,
		&i.FinishedAt,
	)
	return i, err
}
