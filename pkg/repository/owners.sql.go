// Code generated by sqlc. DO NOT EDIT.
// source: owners.sql

package repository

import (
	"context"
)

const createOwner = `-- name: CreateOwner :one
INSERT INTO owners (email, national_id)
VALUES ($1, $2)
RETURNING id, email, national_id, created_at, updated_at
`

type CreateOwnerParams struct {
	Email      string `json:"email"`
	NationalID string `json:"national_id"`
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (Owner, error) {
	row := q.queryRow(ctx, q.createOwnerStmt, createOwner, arg.Email, arg.NationalID)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.NationalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOwnerByEmail = `-- name: GetOwnerByEmail :one
SELECT id, email, national_id, created_at, updated_at
FROM owners
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetOwnerByEmail(ctx context.Context, email string) (Owner, error) {
	row := q.queryRow(ctx, q.getOwnerByEmailStmt, getOwnerByEmail, email)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.NationalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOwnerByID = `-- name: GetOwnerByID :one
SELECT id, email, national_id, created_at, updated_at
FROM owners
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOwnerByID(ctx context.Context, id int32) (Owner, error) {
	row := q.queryRow(ctx, q.getOwnerByIDStmt, getOwnerByID, id)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.NationalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOwnerByNationalID = `-- name: GetOwnerByNationalID :one
SELECT id, email, national_id, created_at, updated_at
FROM owners
WHERE national_id = $1
LIMIT 1
`

func (q *Queries) GetOwnerByNationalID(ctx context.Context, nationalID string) (Owner, error) {
	row := q.queryRow(ctx, q.getOwnerByNationalIDStmt, getOwnerByNationalID, nationalID)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.NationalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
