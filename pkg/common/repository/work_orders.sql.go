// Code generated by sqlc. DO NOT EDIT.
// source: work_orders.sql

package repository

import (
	"context"
	"time"
)

const createWorkOrder = `-- name: CreateWorkOrder :one
INSERT INTO work_orders (
    change_tires,
    change_parts,
    car_id,
    previous_status,
    current_status
  )
VALUES ($1, $2, $3, 'CREATED', 'CREATED')
RETURNING id, change_tires, change_parts, current_status, previous_status, car_id, created_at, updated_at
`

type CreateWorkOrderParams struct {
	ChangeTires bool  `json:"change_tires"`
	ChangeParts bool  `json:"change_parts"`
	CarID       int64 `json:"car_id"`
}

func (q *Queries) CreateWorkOrder(ctx context.Context, arg CreateWorkOrderParams) (WorkOrder, error) {
	row := q.queryRow(ctx, q.createWorkOrderStmt, createWorkOrder, arg.ChangeTires, arg.ChangeParts, arg.CarID)
	var i WorkOrder
	err := row.Scan(
		&i.ID,
		&i.ChangeTires,
		&i.ChangeParts,
		&i.CurrentStatus,
		&i.PreviousStatus,
		&i.CarID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const endWorkOrder = `-- name: EndWorkOrder :exec
UPDATE work_orders
SET previous_status = current_status,
  current_status = 'DONE'
WHERE id = $1
`

func (q *Queries) EndWorkOrder(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.endWorkOrderStmt, endWorkOrder, id)
	return err
}

const getRunningWorkOrders = `-- name: GetRunningWorkOrders :many
SELECT wo.id, change_tires, change_parts, current_status, previous_status, car_id, wo.created_at, wo.updated_at, c.id, license_plate, size, num_wheels, color, owner_id, c.created_at, c.updated_at
FROM work_orders wo
  inner join cars c on wo.car_id = c.id
WHERE wo.current_status not in ('DONE')
`

type GetRunningWorkOrdersRow struct {
	ID             int32           `json:"id"`
	ChangeTires    bool            `json:"change_tires"`
	ChangeParts    bool            `json:"change_parts"`
	CurrentStatus  WorkOrderStatus `json:"current_status"`
	PreviousStatus WorkOrderStatus `json:"previous_status"`
	CarID          int64           `json:"car_id"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	ID_2           int32           `json:"id_2"`
	LicensePlate   string          `json:"license_plate"`
	Size           CarSize         `json:"size"`
	NumWheels      int16           `json:"num_wheels"`
	Color          string          `json:"color"`
	OwnerID        int64           `json:"owner_id"`
	CreatedAt_2    time.Time       `json:"created_at_2"`
	UpdatedAt_2    time.Time       `json:"updated_at_2"`
}

func (q *Queries) GetRunningWorkOrders(ctx context.Context) ([]GetRunningWorkOrdersRow, error) {
	rows, err := q.query(ctx, q.getRunningWorkOrdersStmt, getRunningWorkOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRunningWorkOrdersRow
	for rows.Next() {
		var i GetRunningWorkOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.ChangeTires,
			&i.ChangeParts,
			&i.CurrentStatus,
			&i.PreviousStatus,
			&i.CarID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.LicensePlate,
			&i.Size,
			&i.NumWheels,
			&i.Color,
			&i.OwnerID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkOrderServiceStatus = `-- name: UpdateWorkOrderServiceStatus :exec
UPDATE work_orders
SET previous_status = current_status,
  current_status = $2
WHERE id = $1
`

type UpdateWorkOrderServiceStatusParams struct {
	ID            int32           `json:"id"`
	CurrentStatus WorkOrderStatus `json:"current_status"`
}

func (q *Queries) UpdateWorkOrderServiceStatus(ctx context.Context, arg UpdateWorkOrderServiceStatusParams) error {
	_, err := q.exec(ctx, q.updateWorkOrderServiceStatusStmt, updateWorkOrderServiceStatus, arg.ID, arg.CurrentStatus)
	return err
}
